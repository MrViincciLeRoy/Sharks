name: Gentle Database Reset (Truncate Only)

on:
  workflow_dispatch:
    inputs:
      confirm_reset:
        description: 'Type "RESET" to confirm data wipe'
        required: true
        default: ''

jobs:
  gentle-reset:
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_reset }}" != "RESET" ]; then
            echo "‚ùå Confirmation failed. You must type 'RESET' to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation received. Proceeding with database reset..."

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Truncate all tables (preserves structure)
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGPORT: ${{ secrets.PGPORT }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGSSLMODE: require
        run: |
          echo "üßπ Truncating all tables in database: ${PGDATABASE}"
          echo "Note: This preserves table structure but removes all data"
          
          PGPASSWORD="${PGPASSWORD}" psql -h "${PGHOST}" -p "${PGPORT}" -U "${PGUSER}" -d "${PGDATABASE}" << 'EOF'
          DO $$ 
          DECLARE
              r RECORD;
              truncate_stmt TEXT := 'TRUNCATE TABLE ';
              first_table BOOLEAN := TRUE;
          BEGIN
              -- Build a single TRUNCATE statement for all tables
              FOR r IN (
                  SELECT tablename 
                  FROM pg_tables 
                  WHERE schemaname = 'public'
                  ORDER BY tablename
              ) 
              LOOP
                  IF first_table THEN
                      truncate_stmt := truncate_stmt || quote_ident(r.tablename);
                      first_table := FALSE;
                  ELSE
                      truncate_stmt := truncate_stmt || ', ' || quote_ident(r.tablename);
                  END IF;
              END LOOP;
              
              -- Add CASCADE and RESTART IDENTITY
              IF NOT first_table THEN
                  truncate_stmt := truncate_stmt || ' RESTART IDENTITY CASCADE';
                  RAISE NOTICE 'Executing: %', truncate_stmt;
                  EXECUTE truncate_stmt;
                  RAISE NOTICE '‚úÖ All tables truncated successfully';
              ELSE
                  RAISE NOTICE '‚ö†Ô∏è No tables found to truncate';
              END IF;
          END $$;
          EOF
          
          echo "‚úÖ All data cleared from database"

      - name: Drop remaining constraints and indexes
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGPORT: ${{ secrets.PGPORT }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGSSLMODE: require
        run: |
          echo "üîß Cleaning up constraints and indexes for fresh init..."
          
          PGPASSWORD="${PGPASSWORD}" psql -h "${PGHOST}" -p "${PGPORT}" -U "${PGUSER}" -d "${PGDATABASE}" << 'EOF'
          DO $$ 
          DECLARE
              r RECORD;
          BEGIN
              -- Drop all foreign key constraints
              FOR r IN (
                  SELECT constraint_name, table_name
                  FROM information_schema.table_constraints
                  WHERE constraint_type = 'FOREIGN KEY'
                    AND table_schema = 'public'
              ) 
              LOOP
                  EXECUTE format('ALTER TABLE %I DROP CONSTRAINT IF EXISTS %I CASCADE', 
                                r.table_name, r.constraint_name);
              END LOOP;
              
              -- Drop all indexes (except primary keys)
              FOR r IN (
                  SELECT indexname, tablename
                  FROM pg_indexes
                  WHERE schemaname = 'public'
                    AND indexname NOT LIKE '%_pkey'
              )
              LOOP
                  EXECUTE format('DROP INDEX IF EXISTS %I CASCADE', r.indexname);
              END LOOP;
              
              RAISE NOTICE '‚úÖ Constraints and indexes cleaned';
          END $$;
          EOF

      - name: Verify database is empty
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGPORT: ${{ secrets.PGPORT }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGSSLMODE: require
        run: |
          echo "üîç Verifying tables are empty..."
          
          PGPASSWORD="${PGPASSWORD}" psql -h "${PGHOST}" -p "${PGPORT}" -U "${PGUSER}" -d "${PGDATABASE}" << 'EOF'
          DO $$ 
          DECLARE
              r RECORD;
              total_rows BIGINT := 0;
              table_count INT := 0;
          BEGIN
              FOR r IN (
                  SELECT tablename 
                  FROM pg_tables 
                  WHERE schemaname = 'public'
                  ORDER BY tablename
                  LIMIT 5
              ) 
              LOOP
                  EXECUTE format('SELECT COUNT(*) FROM %I', r.tablename) INTO total_rows;
                  RAISE NOTICE 'Sample: Table % has % rows', r.tablename, total_rows;
                  table_count := table_count + 1;
              END LOOP;
              
              RAISE NOTICE '‚úÖ Database ready for reinitialization';
          END $$;
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build initialization Docker image
        run: |
          echo "üèóÔ∏è  Building Docker image..."
          docker build -f Dockerfile.init -t odoo-init .

      - name: Reinitialize Odoo (Fresh Install Mode)
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGPORT: ${{ secrets.PGPORT }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGSSLMODE: require
        run: |
          echo "üöÄ Reinitializing Odoo in fresh install mode..."
          echo "This will detect the truncated database and perform a clean install"
          
          docker run --rm \
            -e PGHOST="${PGHOST}" \
            -e PGPORT="${PGPORT}" \
            -e PGUSER="${PGUSER}" \
            -e PGPASSWORD="${PGPASSWORD}" \
            -e PGDATABASE="${PGDATABASE}" \
            -e PGSSLMODE="${PGSSLMODE}" \
            odoo-init

      - name: Reset Complete
        run: |
          echo "‚úÖ Gentle database reset completed!"
          echo ""
          echo "üìã What happened:"
          echo "  1. ‚úÖ Truncated all tables (preserved structure)"
          echo "  2. ‚úÖ Dropped constraints and indexes"
          echo "  3. ‚úÖ Fresh Odoo installation initialized"
          echo ""
          echo "üîê Default credentials:"
          echo "  Username: admin"
          echo "  Password: admin"
          echo ""
          echo "Your database is ready to use!"
