name: Deploy Odoo Addon from ZIP

on:
  workflow_dispatch:
    inputs:
      zip_file_url:
        description: 'URL to the ZIP file containing the addon'
        required: true
        type: string
      addon_name:
        description: 'Name of the addon (folder name in custom-addons/)'
        required: true
        type: string

jobs:
  deploy-addon:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Download ZIP file
        run: |
          echo "Downloading ZIP from ${{ github.event.inputs.zip_file_url }}"
          curl -L -o addon.zip "${{ github.event.inputs.zip_file_url }}"
          
      - name: Verify ZIP file
        run: |
          if [ ! -f addon.zip ]; then
            echo "Error: ZIP file not found"
            exit 1
          fi
          
          echo "ZIP file downloaded successfully"
          unzip -l addon.zip

      - name: Extract and organize addon
        run: |
          ADDON_NAME="${{ github.event.inputs.addon_name }}"
          TARGET_PATH="custom-addons/${ADDON_NAME}"
          
          echo "Creating temporary extraction directory..."
          mkdir -p temp_extract
          
          echo "Extracting ZIP file..."
          unzip -q addon.zip -d temp_extract
          
          # Find the actual addon directory (it might be nested)
          echo "Searching for __manifest__.py or __openerp__.py..."
          MANIFEST_PATH=$(find temp_extract -name "__manifest__.py" -o -name "__openerp__.py" | head -n 1)
          
          if [ -z "$MANIFEST_PATH" ]; then
            echo "Error: No __manifest__.py or __openerp__.py found in ZIP"
            echo "ZIP contents:"
            find temp_extract -type f
            exit 1
          fi
          
          # Get the directory containing the manifest
          ADDON_DIR=$(dirname "$MANIFEST_PATH")
          echo "Found addon at: $ADDON_DIR"
          
          # Create target directory
          echo "Creating target directory: $TARGET_PATH"
          mkdir -p "$TARGET_PATH"
          
          # Copy files to target (not the parent folder, just contents)
          echo "Copying addon files to $TARGET_PATH..."
          cp -r "$ADDON_DIR"/* "$TARGET_PATH"/
          
          # Verify the structure
          echo "Verifying addon structure..."
          if [ ! -f "$TARGET_PATH/__manifest__.py" ] && [ ! -f "$TARGET_PATH/__openerp__.py" ]; then
            echo "Error: __manifest__.py not found in target location"
            echo "Target directory contents:"
            ls -la "$TARGET_PATH"
            exit 1
          fi
          
          echo "Addon deployed successfully to $TARGET_PATH"
          echo "Contents:"
          ls -la "$TARGET_PATH"
          
          # Cleanup
          rm -rf temp_extract addon.zip

      - name: Validate addon structure
        run: |
          ADDON_NAME="${{ github.event.inputs.addon_name }}"
          TARGET_PATH="custom-addons/${ADDON_NAME}"
          
          echo "Validating addon structure..."
          
          # Check for __manifest__.py
          if [ ! -f "$TARGET_PATH/__manifest__.py" ] && [ ! -f "$TARGET_PATH/__openerp__.py" ]; then
            echo "❌ Missing __manifest__.py or __openerp__.py"
            exit 1
          fi
          echo "✓ Manifest file found"
          
          # Check for __init__.py
          if [ ! -f "$TARGET_PATH/__init__.py" ]; then
            echo "⚠️  Warning: __init__.py not found (might be needed)"
          else
            echo "✓ __init__.py found"
          fi
          
          # Display manifest contents
          echo ""
          echo "Manifest contents:"
          if [ -f "$TARGET_PATH/__manifest__.py" ]; then
            cat "$TARGET_PATH/__manifest__.py"
          else
            cat "$TARGET_PATH/__openerp__.py"
          fi
          
          echo ""
          echo "✓ Addon structure validated successfully"

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Commit and push changes
        run: |
          ADDON_NAME="${{ github.event.inputs.addon_name }}"
          
          git add "custom-addons/${ADDON_NAME}"
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy addon: ${ADDON_NAME}
            
            - Extracted from ZIP: ${{ github.event.inputs.zip_file_url }}
            - Deployed to: custom-addons/${ADDON_NAME}
            - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            
            git push
            echo "✓ Addon committed and pushed successfully"
          fi

      - name: Create deployment summary
        run: |
          ADDON_NAME="${{ github.event.inputs.addon_name }}"
          TARGET_PATH="custom-addons/${ADDON_NAME}"
          
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Addon Name:** ${ADDON_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Path:** ${TARGET_PATH}" >> $GITHUB_STEP_SUMMARY
          echo "**Source ZIP:** ${{ github.event.inputs.zip_file_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find "$TARGET_PATH" -type f | sed "s|^$TARGET_PATH/||" | sort >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
